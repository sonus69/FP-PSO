name: Node.js CI/CD

on:
  release:
    types: [created]
  push:
    branches: [main]


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - name: Docker Build
        uses: docker/setup-buildx-action@v2
      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: publish image and push to docker hub
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: farhanrizqi/final_project_pso:latest
  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 22.2.0
      - name: install nodejs dll
        run: npm install
      - name: install mocha
        run: npm install --save-dev mocha
      - name: Verify Mocha installation
        run: npm mocha --version
      - name: Fix permissions for Mocha
        run: |
          chmod 0777 ./node_modules/.bin/mocha
          chmod 0777 ./node_modules/.bin/_mocha
      - name: Execute Mocha
        run: |
          chmod 0555 ./node_modules/.bin/mocha
          chmod 0555 ./node_modules/.bin/_mocha
      - name: Run tests
        run: npm test
  
  deploy:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.5
          terraform_wrapper: false
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TF_USER_AWS_KEY}}
          aws-secret-access-key: ${{secrets.TF_USER_AWS_SECRET}}
          aws-region: ap-southeast-2
      
      - name: Initialize Terraform
        id: init
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.out
      
      - name: Terraform Apply
        run: terraform apply plan.out
        env:
          TF_VAR_access_key: ${{ secrets.TF_USER_AWS_KEY }}
          TF_VAR_secret_key: ${{ secrets.TF_USER_AWS_SECRET }}
      
      - name: wait 20 seconds
        run: sleep 20
      
      - name: Get Instance IP
        id: instance_ip
        run: |
          INSTANCE_IP=$(terraform output -raw instance_ip)
          echo "::set-output name=instance_ip::$INSTANCE_IP"
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo ${{ env.INSTANCE_IP }}
      
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      
      - name: Get SSH Private Key
        id: ssh_private_key
        run: |
          SSH_PRIVATE_KEY=$(terraform show -json | jq -r '.values.root_module.resources[] | select(.type == "tls_private_key" and .name == "rsa_4096") | .values.private_key_pem')
          echo "${SSH_PRIVATE_KEY}" > ssh_private_key.pem
          chmod 600 ssh_private_key.pem
          echo "::set-output name=ssh_private_key::ssh_private_key.pem"
          echo "$SSH_PRIVATE_KEY"
      
      - name: Push Docker Image to EC2 Instance
        shell: /usr/bin/bash -e {0}
        env:
          AWS_REGION: ap-southeast-2
          TF_VAR_access_key: ${{ secrets.TF_USER_AWS_KEY }}
          TF_VAR_secret_key: ${{ secrets.TF_USER_AWS_SECRET }}
          INSTANCE_IP: ${{ env.INSTANCE_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_private_key.pem ubuntu@${{ env.INSTANCE_IP }} '
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker ubuntu
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/final_project_pso:latest
          sudo docker run -d -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/final_project_pso:latest
          '
  
